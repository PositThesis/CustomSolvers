cmake_minimum_required(VERSION 3.10)

project(CustomKrylovSolvers VERSION 0.1)
include(CTest)

find_package(universal CONFIG REQUIRED)
find_package(Eigen3 3.4 REQUIRED NO_MODULE)
find_package(EigenUniversalIntegration 0.1.0 CONFIG REQUIRED)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

option(DEBUG   "Enable Debugging"               OFF)
option(OPENMP  "Enable OpenMP"                  ON)

if(DEBUG)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
else(DEBUG)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -march=native") # add -DNDEBUG later when everything works

    if(OPENMP)
        message("using openmp")
        find_package(OpenMP REQUIRED)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fopenmp")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fopenmp")
    endif(OPENMP)
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
endif(DEBUG)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-sign-compare -Wno-unused")

message("Flags: ${CMAKE_CXX_FLAGS}")

add_executable(Tests src/tests.cxx)
target_link_libraries(Tests Eigen3::Eigen OpenMP::OpenMP_CXX EigenUniversalIntegration::EigenUniversalIntegration)
target_include_directories(Tests PUBLIC "${PROJECT_BINARY_DIR}" "include" universal USE_FDP=1)
install(TARGETS Tests DESTINATION bin)
add_test(NAME Tests COMMAND Tests)

list(APPEND Algorithms GMRES QMR QMRWLA)
list(APPEND NBitsList 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80)
list(APPEND ESList 0 1 2 3 4)
list(APPEND ESNBitsList 16 32 64)
list(APPEND IEEETypes Float Double LongDouble)

foreach(algorithm IN LISTS Algorithms)
    foreach(NBits IN LISTS NBitsList)
        add_executable(Posit${NBits}${algorithm} src/main.cxx)
        target_link_libraries(Posit${NBits}${algorithm} Eigen3::Eigen OpenMP::OpenMP_CXX EigenUniversalIntegration::EigenUniversalIntegration)
        target_include_directories(Posit${NBits}${algorithm} PUBLIC "${PROJECT_BINARY_DIR}" "include" universal)
        target_compile_definitions(Posit${NBits}${algorithm} PUBLIC USE_${algorithm} USE_PositCustom USE_Posit_NBits=${NBits} USE_Posit_ES=2 USE_FDP=1)
        install(TARGETS Posit${NBits}${algorithm} DESTINATION bin)
    endforeach()
    foreach(NBits IN LISTS NBitsList)
        add_executable(Posit${NBits}${algorithm}_no_fdp src/main.cxx)
        target_link_libraries(Posit${NBits}${algorithm}_no_fdp Eigen3::Eigen OpenMP::OpenMP_CXX EigenUniversalIntegration::EigenUniversalIntegration)
        target_include_directories(Posit${NBits}${algorithm}_no_fdp PUBLIC "${PROJECT_BINARY_DIR}" "include" universal)
        target_compile_definitions(Posit${NBits}${algorithm}_no_fdp PUBLIC USE_${algorithm} USE_PositCustom USE_Posit_NBits=${NBits} USE_Posit_ES=2 USE_FDP=0)
        install(TARGETS Posit${NBits}${algorithm}_no_fdp DESTINATION bin)
    endforeach()
    foreach(ES IN LISTS ESList)
        foreach(NBits IN LISTS ESNBitsList)
            add_executable(Posit${NBits}${ES}${algorithm} src/main.cxx)
            target_link_libraries(Posit${NBits}${ES}${algorithm} Eigen3::Eigen OpenMP::OpenMP_CXX EigenUniversalIntegration::EigenUniversalIntegration)
            target_include_directories(Posit${NBits}${ES}${algorithm} PUBLIC "${PROJECT_BINARY_DIR}" "include" universal)
            target_compile_definitions(Posit${NBits}${ES}${algorithm} PUBLIC USE_${algorithm} USE_PositCustom USE_Posit_NBits=${NBits} USE_Posit_ES=${ES} USE_FDP=1)
            install(TARGETS Posit${NBits}${ES}${algorithm} DESTINATION bin)
        endforeach()
    endforeach()
    foreach(ES IN LISTS ESList)
        foreach(NBits IN LISTS ESNBitsList)
            add_executable(Posit${NBits}${ES}${algorithm}_no_fdp src/main.cxx)
            target_link_libraries(Posit${NBits}${ES}${algorithm}_no_fdp Eigen3::Eigen OpenMP::OpenMP_CXX EigenUniversalIntegration::EigenUniversalIntegration)
            target_include_directories(Posit${NBits}${ES}${algorithm}_no_fdp PUBLIC "${PROJECT_BINARY_DIR}" "include" universal)
            target_compile_definitions(Posit${NBits}${ES}${algorithm}_no_fdp PUBLIC USE_${algorithm} USE_PositCustom USE_Posit_NBits=${NBits} USE_Posit_ES=${ES} USE_FDP=0)
            install(TARGETS Posit${NBits}${ES}${algorithm}_no_fdp DESTINATION bin)
        endforeach()
    endforeach()
    foreach(ieeetype IN LISTS IEEETypes)
        add_executable(${ieeetype}${algorithm} src/main.cxx)
        target_link_libraries(${ieeetype}${algorithm} Eigen3::Eigen OpenMP::OpenMP_CXX EigenUniversalIntegration::EigenUniversalIntegration)
        target_include_directories(${ieeetype}${algorithm} PUBLIC "${PROJECT_BINARY_DIR}" "include" universal)
        target_compile_definitions(${ieeetype}${algorithm} PUBLIC USE_${algorithm} USE_${ieeetype} USE_FDP=0)
        install(TARGETS ${ieeetype}${algorithm} DESTINATION bin)
    endforeach()
endforeach()
